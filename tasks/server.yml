---

- name: Install required packages
  apt: name={{ item }} update_cache=yes state=installed force=yes
  with_items:
    - openssl
    - openvpn

- name: Prepare directory for certificates
  file: path={{ openvpn_path }}/{{ item }} state=directory
  with_items:
    - ccd
    - keys

- name: Generate CA and Server key
  shell: openssl genrsa -out {{ item }}.key {{ openvpn_key_size }} chdir={{ openvpn_path }}/keys creates={{ item }}.key
  with_items:
    - ca
    - server

- name: Generate client key
  shell: openssl genrsa -out {{ item }}.key {{ openvpn_key_size }} chdir={{ openvpn_path }}/keys creates={{ item }}.key
  with_items: "{{ openvpn_clients }}"

- name: Set the proper permissions on all RSA keys
  file: path={{ openvpn_path }}/keys recurse=yes state=directory owner=root group=root mode=0600

- name: Generate CA certificate
  shell: openssl req -nodes -batch -new -x509 -key {{ openvpn_path }}/keys/ca.key -out {{ openvpn_ca }}.crt -days {{ openvpn_days_valid }} -subj "{{ openvpn_request_subject }}/CN={{ inventory_hostname }}"  chdir={{ openvpn_path }}/keys creates=ca.crt

- name: Generate the OpenSSL configuration that will be used for the Server req and ca commands
  template: src=openssl-server-certificate.cnf.j2
            dest={{ openvpn_path }}/keys/openssl-server-certificate.cnf

- name: Seed a blank database file that will be used when generating the Server's certificate
  file: path={{ openvpn_path }}/keys/index.txt
        state=touch

- name: Seed a serial file that will be used when generating the Server's certificate
  copy: content="01"
        dest={{ openvpn_path }}/keys/serial

- name: Generate server csr
  shell: openssl req -batch -extensions server -new -key server.key -out server.csr -config {{ openvpn_path }}/keys/openssl-server-certificate.cnf chdir={{ openvpn_path }}/keys creates=server.csr

- name: Generate server certificate
  shell: openssl ca -batch -extensions server -in server.csr -out server.crt -config openssl-server-certificate.cnf chdir={{ openvpn_path }}/keys creates=server.crt

- name: Generate client csr
  shell: openssl req -new -key {{ item }}.key -subj "{{ openvpn_request_subject }}/CN={{ item }}" -out {{ item }}.csr chdir={{ openvpn_path }}/keys creates={{ item }}.csr
  with_items: "{{ openvpn_clients }}"

- name: Generate client certificate
  shell: openssl x509 -CA ca.crt -CAkey ca.key -CAcreateserial -req -days {{ openvpn_days_valid }} -in {{ item }}.csr -out {{ item }}.crt chdir={{ openvpn_path }}/keys creates={{ item }}.crt
  with_items: "{{ openvpn_clients }}"

- name: Generate ta key
  shell: openvpn --genkey --secret ta.key chdir=/etc/openvpn/keys creates=ta.key

- name: Generate dh key
  shell: openssl dhparam -out dh2048.pem 2048 chdir=/etc/openvpn/keys creates=dh2048.pem

- name: Enable IPv4 traffic forwarding
  sysctl: name=net.ipv4.ip_forward value=1

- name: Start openvpn server
  systemd: state=restarted name=openvpn@server

- name: Copy server keys and certificates
  shell: cp /etc/openvpn/keys/{{ item }} /etc/openvpn/{{ item }} creates=/etc/openvpn/{{ item }}
  with_items:
    - ca.crt
    - server.crt
    - server.key
    - dh2048.pem
    - ta.key

- name: Create server config
  template: src=server.conf dest=/etc/openvpn/server.conf mode=0644
  notify: restart openvpn

- name: Fetch CA certificate
  fetch: src=/etc/openvpn/keys/{{ item[1] }} dest=certs/{{ item[0] }}/{{ item[1] }} flat=yes
  with_nested:
    - "{{ openvpn_clients }}"
    - ['ca.crt', 'dh2048.pem', 'ta.key']

- name: Fetch client key and certificate
  fetch: src=/etc/openvpn/keys/{{ item[0] }}.{{ item[1] }} dest=certs/{{ item[0] }}/{{ item[0] }}.{{ item[1] }} flat=yes
  with_nested:
    - "{{ openvpn_clients }}"
    - ['key', 'crt']
